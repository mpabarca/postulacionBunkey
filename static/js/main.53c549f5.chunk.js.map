{"version":3,"sources":["AddExercise.js","actions/exercisesActions.js","actions/types.js","App.js","reducers/exerciseReducer.js","reducers/reducer.js","store.js","serviceWorker.js","index.js"],"names":["AddExercise","num1Ref","React","createRef","num2Ref","operatorRef","addNewExercise","e","preventDefault","result","num1","parseFloat","_this","current","value","num2","operator","exercise","props","addExercises","react_default","a","createElement","onSubmit","this","Row","className","placeholder","type","ref","Col","id","Component","connect","state","exercises","payload","App","showExercise","actualResult","length","Container","src_AddExercise","initialState","combineReducers","arguments","undefined","action","Object","objectSpread","concat","toConsumableArray","middleware","thunk","store","createStore","reducerPrincipal","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53c549f5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Row, Col} from 'react-bootstrap';\r\nimport './addExercise.css';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {addExercises} from './actions/exercisesActions';\r\n\r\nclass AddExercise extends Component{\r\n    \r\n   num1Ref=React.createRef();\r\n   num2Ref=React.createRef();\r\n   operatorRef=React.createRef();\r\n\r\n    addNewExercise=(e)=>{\r\n        e.preventDefault();\r\n        let num1=parseFloat(this.num1Ref.current.value);\r\n        let num2=parseFloat(this.num2Ref.current.value);\r\n        let operator= this.operatorRef.current.value;\r\n        let result;\r\n        if (operator==='add'){\r\n            result=num1+num2\r\n        }else if (operator==='subtract'){\r\n            result=num1-num2\r\n        }else if (operator==='divide'){\r\n            result=num1/num2\r\n        }else if (operator==='multiply'){\r\n            result=num1*num2\r\n        }\r\n        let exercise={\r\n            num1:num1,\r\n            num2:num2,\r\n            operator:operator,\r\n            result:result\r\n        };\r\n        this.props.addExercises(exercise);\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.addNewExercise}>\r\n                    <Row className=\"row-form\"><input placeholder='Num1' type='text' ref={this.num1Ref}/></Row>\r\n                    <Row className=\"row-form\"><input placeholder='Num2' type='text' ref={this.num2Ref}/></Row>\r\n                    <Row className=\"row-form\">\r\n                        <Col>\r\n                            <select id=\"select\" ref={this.operatorRef}>\r\n                                <option value=\"\">Operaci√≥n</option>\r\n                                <option value=\"add\">Sumar</option>\r\n                                <option value=\"subtract\">Restar</option>\r\n                                <option value=\"divide\">Dividir</option>\r\n                                <option value=\"multiply\">Multiplicar</option>\r\n                            </select>\r\n                        </Col>\r\n                        <Col><button type=\"submit\">Calcular</button></Col>\r\n                    </Row>\r\n                </form>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state =>({\r\n    exercises:state.exercises.exercises\r\n})\r\n\r\nexport default connect (mapStateToProps, {addExercises})(AddExercise);","import {ADD_EXERCISE, SHOW_EXERCISE} from './types';\r\n\r\nexport const addExercises=(exercise)=>{\r\n    return{\r\n        type:ADD_EXERCISE,\r\n        payload:exercise\r\n    }\r\n}\r\nexport const showExercise=()=>{\r\n    return{\r\n        type:SHOW_EXERCISE\r\n    }\r\n}","export const ADD_EXERCISE = 'ADD_EXERCISE';\r\nexport const SHOW_EXERCISE = 'SHOW_EXERCISE';","import React, {Component} from 'react';\nimport AddExercise from './AddExercise';\nimport {Row, Container} from 'react-bootstrap';\n\nimport {connect} from 'react-redux';\nimport {showExercise} from './actions/exercisesActions';\n\nclass App extends Component{\n\n  componentDidMount(){\n    this.props.showExercise();\n  }\n \n  render(){\n    const exercises = (this.props).exercises;\n    let actualResult=((exercises.length)===0)?'':(exercises[exercises.length-1].result);\n\n    return (\n      <Container>\n        <Row><AddExercise/></Row>\n        <Row><h6>Resultado</h6></Row>\n        <Row><div>{actualResult}</div>  </Row>\n        \n            \n      </Container>\n        \n    )}\n}\n\nconst mapToStateToProps=state=>({\n  exercises:state.exercises.exercises\n})\nexport default connect(mapToStateToProps,{showExercise})(App);\n","import {ADD_EXERCISE, SHOW_EXERCISE} from '../actions/types';\r\n\r\nconst initialState = {\r\n    exercises: []\r\n}\r\n\r\nexport default function (state=initialState, action){\r\n    switch(action.type){\r\n        case ADD_EXERCISE:\r\n            return{\r\n                ...state,\r\n                exercises:[...state.exercises,action.payload]\r\n            }\r\n        case SHOW_EXERCISE:\r\n            return{\r\n                ...state\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport exerciseReducer from './exerciseReducer';\r\n\r\nexport default combineReducers({\r\n    exercises:exerciseReducer\r\n})","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducerPrincipal from './reducers/reducer.js';\r\n\r\nconst initialState = {};\r\nconst middleware=[thunk]\r\nconst store = createStore(reducerPrincipal, initialState,compose(applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    ));\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider> \n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}